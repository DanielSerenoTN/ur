#!/bin/bash

echo "=== URVIC API - Script de Despliegue ==="
echo ""

# Funci√≥n para limpiar contenedores existentes
cleanup() {
    echo "Limpiando contenedores existentes..."
    docker stop urvic-backend-manual urvic-postgres-manual 2>/dev/null || true
    docker rm urvic-backend-manual urvic-postgres-manual 2>/dev/null || true
    echo "‚úÖ Limpieza completada"
    echo ""
}

# Funci√≥n para verificar puertos
check_ports() {
    echo "Verificando puertos..."
    if netstat -tlnp | grep :5435 > /dev/null; then
        echo "Puerto 5435 ya est√° en uso"
        read -p "¬øContinuar de todas formas? (y/n): " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    if netstat -tlnp | grep :20090 > /dev/null; then
        echo "Puerto 20090 ya est√° en uso"
        read -p "¬øContinuar de todas formas? (y/n): " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    echo "Puertos disponibles"
    echo ""
}

# Funci√≥n para construir la imagen
build_image() {
    echo "üî® Construyendo imagen Docker..."
    docker build -t api-urvic_app . || {
        echo "Error construyendo la imagen"
        exit 1
    }
    echo "‚úÖ Imagen construida exitosamente"
    echo ""
}

# Funci√≥n para ejecutar PostgreSQL
start_postgres() {
    echo "Iniciando PostgreSQL..."
    docker run -d \
        --name urvic-postgres-manual \
        -e POSTGRES_USER=urvic_prod_user \
        -e POSTGRES_PASSWORD=SuperSecurePassword2025 \
        -e POSTGRES_DB=urvic_production \
        -p 5435:5432 \
        postgres:15-alpine || {
        echo "Error iniciando PostgreSQL"
        exit 1
    }
    
    echo "‚è≥ Esperando que PostgreSQL est√© listo..."
    sleep 10
    echo "‚úÖ PostgreSQL iniciado en puerto 5435"
    echo ""
}

# Funci√≥n para ejecutar la aplicaci√≥n
start_app() {
    echo "üöÄ Iniciando aplicaci√≥n URVIC..."
    docker run -d \
        --name urvic-backend-manual \
        --link urvic-postgres-manual:postgres \
        -p 20090:20090 \
        --entrypoint ./urvic-backend \
        api-urvic_app || {
        echo "Error iniciando la aplicaci√≥n"
        exit 1
    }
    echo "Aplicaci√≥n iniciada en puerto 20090"
    echo ""
}

# Funci√≥n para verificar el estado
check_status() {
    echo "Estado de los contenedores:"
    docker ps | grep urvic || echo "No hay contenedores urvic ejecut√°ndose"
    echo ""
    
    echo "Verificando conectividad..."
    sleep 5
    if curl -s http://localhost:20090/api/status-colors > /dev/null; then
        echo "API respondiendo correctamente"
        echo "Despliegue exitoso!"
        echo ""
        echo "URLs disponibles:"
        echo "   ‚Ä¢ API: http://localhost:20090/api/"
        echo "   ‚Ä¢ Status Colors: http://localhost:20090/api/status-colors"
        echo "   ‚Ä¢ Swagger UI: http://localhost:20090/swagger-ui/"
    else
        echo "API no responde a√∫n, verificando logs..."
        echo ""
        echo "Logs de la aplicaci√≥n:"
        docker logs urvic-backend-manual
    fi
}

# Funci√≥n principal
main() {
    echo "Iniciando despliegue de URVIC API..."
    echo ""
    
    # Verificar que existe .env
    if [ ! -f ".env" ]; then
        echo "Error: archivo .env no encontrado"
        exit 1
    fi
    
    cleanup
    check_ports
    build_image
    start_postgres
    start_app
    check_status
}

# Funci√≥n para mostrar ayuda
show_help() {
    echo "Uso: $0 [opci√≥n]"
    echo ""
    echo "Opciones:"
    echo "  start    - Iniciar todos los servicios (por defecto)"
    echo "  stop     - Parar todos los servicios"
    echo "  restart  - Reiniciar todos los servicios"
    echo "  logs     - Mostrar logs de la aplicaci√≥n"
    echo "  status   - Mostrar estado de los contenedores"
    echo "  help     - Mostrar esta ayuda"
}

# Funci√≥n para parar servicios
stop_services() {
    echo "Parando servicios..."
    docker stop urvic-backend-manual urvic-postgres-manual 2>/dev/null || true
    echo "Servicios parados"
}

# Funci√≥n para mostrar logs
show_logs() {
    echo "Logs de la aplicaci√≥n:"
    docker logs -f urvic-backend-manual
}

# Funci√≥n para mostrar estado
show_status() {
    echo "Estado de los contenedores:"
    docker ps | grep urvic || echo "No hay contenedores urvic ejecut√°ndose"
    echo ""
    echo "Probando conectividad:"
    curl -s http://localhost:20090/api/status-colors || echo "API no responde"
}

# Manejo de argumentos
case "${1:-start}" in
    start)
        main
        ;;
    stop)
        stop_services
        ;;
    restart)
        stop_services
        sleep 2
        main
        ;;
    logs)
        show_logs
        ;;
    status)
        show_status
        ;;
    help)
        show_help
        ;;
    *)
        echo "Opci√≥n no v√°lida: $1"
        show_help
        exit 1
        ;;
esac